import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';

function Square(props) {
    return (
        <button class="bg-white px-6 py-6 text-gray-800 font-semibold active:px-6 px-6"
            onClick={props.onClick}>
            {props.value}
        </button>
    );
}

class Board extends React.Component {
    renderSquare(i) {
        return (
            <Square
                class="td"
                value={this.props.squares[i]}
                onClick={() => this.props.onClick(i)}
            />
        );
    }

    render() {
        return (
            <div class="flex flex-col">
                <div class="overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div class="py-2 inline-block min-w-full sm:px-6 lg:px-8">
                        <div class="overflow-hidden">
                            <table class="min-w-full border text-center">
                                <tbody>
                                    <tr class="bg-white border">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(0)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(1)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(2)}</td>
                                    </tr>
                                    <tr class="bg-white border">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(3)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(4)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(5)}</td>
                                    </tr>
                                    <tr class="bg-white border">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(6)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(7)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border">{this.renderSquare(8)}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

class Game extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            history: [{
                squares: Array(9).fill(null),
                stepIndex: null,
                whoClicked: null,
            }],
            stepNumber: 0,
            xIsNext: true
        };
    }

    handleClick(i) {
        const locations = [
            [1, 1],
            [2, 1],
            [3, 1],
            [1, 2],
            [2, 2],
            [3, 2],
            [1, 3],
            [2, 3],
            [3, 3]
          ];

        const history = this.state.history.slice(0, this.state.stepNumber + 1);
        const current = history[history.length - 1];
        const squares = current.squares.slice();
        if (calculateWinner(squares) || squares[i]) {
            return;
        }
        squares[i] = this.state.xIsNext ? 'X' : 'O';
        this.setState({
            history: history.concat([{
                squares: squares,
                location: locations[i],
                stepIndex: i,
                whoClicked: this.state.xIsNext ? 'O' : 'X',
            }]),
            stepNumber: history.length,
            xIsNext: !this.state.xIsNext,
        });
    }

    jumpTo(step, index) {
        this.setState({
            stepNumber: step,
            xIsNext: (step % 2) === 0,
        });
    }

    render() {
        const history = this.state.history;
        const current = history[this.state.stepNumber];
        const winner = calculateWinner(current.squares);

        const moves = history.map((step, move) => {
            const desc = move 
              ? "Go to move #" + move + " @ " + history[move].location
              : 'Go to game start';

            return (
                <li key={move}>
                    <button class="transform motion-safe:hover:-translate-y-1 motion-safe:hover:scale-110 transition ease-in-out duration-300 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-l"
                        onClick={() => this.jumpTo(move)}>{move === this.state.stepNumber ? <b>{desc}</b> : desc}</button>
                </li>
            );
        });

        const details = history.map((step, move) => {

            let coordinate = null;
            let bold = "";

            if (step.stepIndex === move) {
                bold = "font-bold";
            }

            switch (step.stepIndex) {
                case 0: coordinate = '(1,1)'; break;
                case 1: coordinate = '(1,2)'; break;
                case 2: coordinate = '(1,3)'; break;
                case 3: coordinate = '(2,1)'; break;
                case 4: coordinate = '(2,2)'; break;
                case 5: coordinate = '(2,3)'; break;
                case 6: coordinate = '(3,1)'; break;
                case 7: coordinate = '(3,2)'; break;
                case 8: coordinate = '(3,3)'; break;
                default: coordinate = 'Unknown'; break;
            };

            const desc = step.whoClicked ?
                step.whoClicked + ' has selected square # ' + step.stepIndex + coordinate :
                'No moves yet';

            return (
                <li class={bold} key={coordinate}>{desc}</li>
            );
        });

        let status;
        if (winner) {
            status = 'Winner: ' + winner;
        } else {
            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
        }

        return (
            <div class="font-mono text-lg text-gray-800 text-center grid grid-cols-3 gap-6 justify-items-center">
                <div className="move-details">
                    <div>Move Details</div>
                    <ol class="list-disc list-inside">{details}</ol>
                </div>
                <div className="game-board">
                    <Board
                        squares={current.squares}
                        onClick={(i) => this.handleClick(i)}
                    />
                </div>
                <div className="game-info">
                    <div class="font-bold">{status}</div>
                    <ol>{moves}</ol>
                </div>
            </div>
        );
    }
}

// ========================================

ReactDOM.render(
    <Game />,
    document.getElementById('root')
);

function calculateWinner(squares) {
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
    ];
    for (let i = 0; i < lines.length; i++) {
        const [a, b, c] = lines[i];
        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
            return squares[a];
        }
    }
    return null;
}




/*
If you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game which are listed in order of increasing difficulty:

    DONE - Display the location for each move in the format (col, row) in the move history list.
    Bold the currently selected item in the move list.
    Rewrite Board to use two loops to make the squares instead of hardcoding them.
    Add a toggle button that lets you sort the moves in either ascending or descending order.
    When someone wins, highlight the three squares that caused the win.
    When no one wins, display a message about the result being a draw.
*/